import os

def split_binary_file(file_path, chunk_size_kb=70):
    chunk_size = chunk_size_kb * 1024  # KB to Bytes
    base_name, _ = os.path.splitext(file_path)
    with open(file_path, 'rb') as f:
        index = 1
        while True:
            chunk = f.read(chunk_size)
            if not chunk:
                break
            chunk_filename = f"{base_name}-{index}.ini"
            with open(chunk_filename, 'wb') as chunk_file:
                chunk_file.write(chunk)
            print(f"Created: {chunk_filename}")
            index += 1

def merge_binary_files(base_name, output_filename):
    part_files = sorted(
        [f for f in os.listdir() if f.startswith(base_name) and '-num' in f and f.endswith('.bin')],
        key=lambda x: int(x.split('-')[-1].split('.ini')[0])
    )
    with open(output_filename, 'wb') as merged:
        for part in part_files:
            with open(part, 'rb') as pf:
                merged.write(pf.read())
            print(f"Merged: {part}")

# 分割
#split_binary_file("FD_HDC.ini")

# マージ（結合ファイル名を自由に指定可能）
merge_binary_files("FD_HDC.ini", "restored.ini")
